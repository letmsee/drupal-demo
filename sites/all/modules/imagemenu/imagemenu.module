<?php
/**
 * @file
 *
 *  Imagemenu module
 *
 * Alter menu_edit_item form to include managed_file field.
 * Store images for menu links in file_managed table and fid's for mlid's in file_usage table.
 */


/**
 * Implementation of hook_menu()
 */
function imagemenu_menu() {
  $items['admin/config/user-interface/imagemenu'] = array(
    'title' => 'Imagemenu',
    'description' => 'Settings for imagemenu.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagemenu_admin_form'),
    'access arguments' => array('administer menu'),
    'file' => 'imagemenu.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_form_menu_edit_item_alter()
 */
function imagemenu_form_menu_edit_item_alter(&$form, $form_state) {
  $imagemenus = variable_get('imagemenu_menus', array());

  if (empty($form['original_item']['#value']['menu_name']) || !in_array($form['original_item']['#value']['menu_name'], $imagemenus)) return;

  $settings = imagemenu_settings($form['original_item']['#value']['menu_name']);

  $form['imagemenu'] = array(
    '#type' => 'fieldset',
    '#title' => t('Image')
  );

  $form['imagemenu']['image-main'] = array(
    '#type' => 'managed_file',
    '#title' => t('Image file'),
    '#default_value' => imagemenu_get_menulink_file($form['mlid']['#value']),
    '#upload_validators' => array('
      file_validate_extensions' => array(implode(' ', array('png', 'gif', 'jpg', 'jpeg')))
    ),
    '#upload_location' => 'public://imagemenu',
  );


  $form['#submit'][] = 'imagemenu_menu_edit_item_submit';

  if (!$settings['use_hover']) return;

  $form['imagemenu']['image-hover'] = array(
    '#type' => 'managed_file',
    '#title' => t('2nd image file (mouse over)'),
    '#default_value' => imagemenu_get_menulink_file($form['mlid']['#value'], 'menu-link-hover'),
    '#upload_validators' => array('
      file_validate_extensions' => array(implode(' ', array('png', 'gif', 'jpg', 'jpeg')))
    ),
    '#upload_location' => 'public://imagemenu',
  );
}

/**
 * Submit handler for file elements
 */
function imagemenu_menu_edit_item_submit($form, &$form_state) {
  // types of files stored in file_usage for menu links
  $imagemenu_types = array('main' => 'menu-link', 'hover' => 'menu-link-hover');

  // menu link id
  $mlid = $form_state['values']['mlid'];

  // load all image types, current and previous values
  $images = $prev_images = array();
  $images['main'] = $form['imagemenu']['image-main']['#file'];
  $prev_images['main'] = $form['imagemenu']['image-main']['#default_value'];

  // mouse over images
  if (variable_get('imagemenu_use_hover', TRUE)) {
    $images['hover'] = $form['imagemenu']['image-hover']['#file'];
    $prev_images['hover'] = $form['imagemenu']['image-hover']['#default_value'];
  }

  // looad prev images files
  foreach ($prev_images as $type => $fid) if ($fid) {
    $prev_images[$type] = file_load($fid);
  }

  // handle addition, removal, replacement of images
  foreach ($images as $type => $image) {
    $prev_image = isset($prev_images[$type]) ? $prev_images[$type] : NULL;

    if (!$image && $prev_image) { // existing image deleted
      file_delete($prev_image, TRUE);
      file_usage_delete($prev_image, 'imagemenu');
    }
    elseif ($image && $image->fid != $form['imagemenu']['image-' . $type]['#default_value']) { // an new file was submitted
      if ($prev_image) { // existing file is replaced
        // rem prev file and it's usage record
        file_delete($prev_image, TRUE);
        file_usage_delete($prev_image, 'imagemenu');
      }
      // save new image
      $image->status = FILE_STATUS_PERMANENT;
      file_save($image);
      file_usage_add($image, 'imagemenu', $imagemenu_types[$type], $mlid);
    }
  }
}

/**
 * Return file id from file_usage table for menu link
 *
 * @param $id menu link mlid
 * @param $type
 * @return file id fid
 */
function imagemenu_get_menulink_file($id, $type = 'menu-link') {
  $query = db_select('file_usage', 'fu')
    ->fields('fu', array('fid'))
    ->condition('module', 'imagemenu')
    ->condition('id', $id)
    ->condition('type', $type);

  return $query->execute()->fetchField();
}


/**
 * Return file ids from file_usage table for all menu links
 *
 * @param $type
 * @return array with mlid as key and fid as value
 */
function imagemenu_get_menulink_files($type = 'menu-link') {
  $files = &drupal_static(__FUNCTION__);

  if (!isset($files[$type])) {
    $query = db_select('file_usage', 'fu')
    ->fields('fu', array('id', 'fid'))
    ->condition('module', 'imagemenu')
    ->condition('type', $type);

    $files[$type] = $query->execute()->fetchAllKeyed();
  }

  return $files[$type];
}

/**
 * Implementation of hook_process_links
 */
// function imagemenu_preprocess_links(&$vars) {
//   $imagemenus = variable_get('imagemenu_menus', array());
//   if (empty($vars['attributes']['id']) || !in_array($vars['attributes']['id'], $imagemenus)) return;

//   kpr($vars);
// }


/**
 * Implementation of hook_process_menu_link
 */
function imagemenu_preprocess_menu_link(&$vars) {
  $imagemenus = variable_get('imagemenu_menus', array());
  if (empty($vars['element']['#original_link']['menu_name'])
      || !in_array($vars['element']['#original_link']['menu_name'], $imagemenus)) return;

  $settings = imagemenu_settings($vars['element']['#original_link']['menu_name']);

  // menu item id
  $mlid = $vars['element']['#original_link']['mlid'];

  // detect and load menu image
  $images = imagemenu_get_menulink_files();
  if (!isset($images[$mlid]) && $settings['use_default'] && $settings['default_image']) {
    $images[$mlid] = $settings['default_image'];
  }
  if (!isset($images[$mlid])) return; // return if no images detected for menu link

  $image = file_load($images[$mlid]);

  // image used on mouse over
  $hover = array();
  if ($settings['use_hover']) {
    $hover_images = imagemenu_get_menulink_files('menu-link-hover');

    if (!isset($hover_images[$mlid]) && $settings['use_default'] && $settings['default_image_hover']) {
      $hover_images[$mlid] = $settings['default_image_hover'];
    }

    if (isset($hover_images[$mlid])) { // skip mouse over if 2nd menu link image is missing
      $hover_image = file_load($hover_images[$mlid]);
      $hover = array(
        'onmouseover' => 'this.src=\'' . image_style_url($settings['image_style'], $hover_image->uri) . '\';',
        'onmouseout' => 'this.src=\'' . image_style_url($settings['image_style'], $image->uri) . '\';',
      );
      //$hover = array('rel' => image_style_url(variable_get('imagemenu_image_style', 'thumbnail'), $hover_image->uri));
    }
  }

  // css classes to be added to image
  $image_class = array('imagemenu-image', 'imagemenu-' . $vars['element']['#original_link']['mlid']);
  // change menu item text with image
  $menu_title = $vars['element']['#title'];
  // avoid check_plain() in l()
  $vars['element']['#localized_options']['html'] = TRUE;
  // replace title text with image markup
  $vars['element']['#title'] = theme('image_style', array(
      'path' =>  $image->uri,
      'style_name' => $settings['image_style'],
      'alt' => $menu_title,
      'title' => $menu_title,
      'attributes' => array('class' => implode(' ', $image_class)) + $hover,
    )
  );
  // add text menu title
  if (!$settings['replace']) {
    $vars['element']['#title'] .= '<span>' . $menu_title . '</span>';
  }
  // load js code which will preload images for mouse over
  static $js_loaded = FALSE;
  if (!$js_loaded && $settings['preload_hover']) {
    drupal_add_js(drupal_get_path('module', 'imagemenu') . '/imagemenu.js');
    $js_loaded = TRUE;
  }
}

/**
 * Default imagemenu settings
 * @return settings array
 */
function imagemenu_default_settings() {
  return array(
    'image_style' => 'thumbnail',
    'use_hover' => FALSE,
    'preload_hover' => FALSE,
    'replace' => FALSE,
    'use_default' => FALSE,
    'default_image' => NULL,
    'default_image_hover' => NULL,
  );
}

/**
 * Imagemenu settings for menu
 * @param menu name
 * @return The
 */
function imagemenu_settings($menu_name = NULL) {
  $settings = &drupal_static(__FUNCTION__);

  $local_menu_name = $menu_name ? $menu_name : 'default';

  if (!isset($settings[$local_menu_name])) {
    $settings[$local_menu_name] = variable_get('imagemenu_settings', imagemenu_default_settings());
    $imagemenus = variable_get('imagemenu_menus', array());

    if ($local_menu_name && in_array($local_menu_name, $imagemenus)) {
      // allow settings based on menu name
      drupal_alter('image_menu', $settings[$local_menu_name], $menu_name);
    }
  }

  return $settings[$local_menu_name];
}
